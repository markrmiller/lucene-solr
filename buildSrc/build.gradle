/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the 'License'); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'java-gradle-plugin'

buildDir = file('build')

group = 'org.apache.lucene.gradle'

apply from: file('common/configure-repositories.gradle')

dependencies {
  implementation gradleApi()
  implementation localGroovy()
  
  implementation 'org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r'
  implementation 'de.thetaphi:forbiddenapis:2.6'
  implementation 'com.ibm.icu:icu4j:62.1'
  implementation 'org.apache.rat:apache-rat:0.11'
  implementation 'junit:junit:4.12'
}

configurations {
  jflex
  rat
  junit4
  javacc
  
  jflex.extendsFrom implementation
}

dependencies {
  jflex 'de.jflex:jflex:1.7.0'
  rat 'org.apache.rat:apache-rat:0.11'
  junit4 'com.carrotsearch.randomizedtesting:junit4-ant'
  javacc 'net.java.dev.javacc:javacc:5.0'
}

sourceSets {
  buildResources {
    resources.srcDirs = ['common', 'ide', 'build-wdocker-test']
    java.srcDirs = []
  }
  buildTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
    }

    java.srcDir 'src/buildTest/java'
    resources.srcDir 'src/buildTest/resources'
  }
  all {
    java {
      sourceCompatibility = '11'
      targetCompatibility = '11'
      
      // Use UTF-8, don't rely on local platform encoding.
      compileJava.options.encoding = 'UTF-8'
      compileTestJava.options.encoding = 'UTF-8'
    }
  }
}

task setupAntPaths {
  doFirst {
    project.rootProject.ext.ratPath = configurations.rat.asPath
    project.rootProject.ext.javaccPath = configurations.javacc.asPath
    project.rootProject.ext.jflexPath = configurations.jflex.asPath
    project.rootProject.ext.junit4Path = configurations.junit4.asPath
  }
}

configurations {
  buildTestImplementation.extendsFrom testImplementation
  buildTestRuntime.extendsFrom testRuntime
  buildTestRuntimeOnly.extendsFrom testRuntimeOnly
}

project.ext.properties.tests_jvms = 1
project.ext.properties.tests_failfast = true

task buildTest(type: Test) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = 'Runs the build tests (if using a unix env and docker is available). Ideally, run pristineClean first.'

  maxHeapSize = '1024m'

  testClassesDirs = sourceSets.buildTest.output.classesDirs
  classpath = sourceSets.buildTest.runtimeClasspath

  outputs.upToDateWhen { false }
  dependsOn project.rootProject.clean
}

clean.doLast {
  // hack for eclipse issue
  file("$buildDir/pluginUnderTestMetadata").mkdirs()
}

if (project.rootProject != project) {
  forbiddenApis {
    signatures -= ['java.io.File']
  }
}
