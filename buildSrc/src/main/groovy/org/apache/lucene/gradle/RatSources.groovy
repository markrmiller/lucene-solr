package org.apache.lucene.gradle
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Task script that is called by Ant's build.xml file:
 * Checks GIT working copy for unversioned or modified files.
 */

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.Status
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import org.eclipse.jgit.errors.*
import org.gradle.api.DefaultTask
import org.gradle.api.GradleException
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.Optional
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import javax.inject.Inject

class RatSources extends DefaultTask {
  
  @Optional
  @Input
  List<String> excludes = new ArrayList<>()
  
  @TaskAction
  void rat() {
    File logFile = File.createTempFile("temp",".tmp")
    logFile.deleteOnExit()
    
    def excludeString = ""
    excludes.each {
      if (it == null) return
        if (excludeString.length() > 0)
          excludeString += ','
      excludeString += it
    }
    
    ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', classpath: project.rootProject.allprojects.find { project -> project.name == 'buildSrc'}.configurations.rat.asPath)
    
    ant.report(reportFile: logFile.getAbsolutePath(), addDefaultLicenseMatchers: 'true') {
      ant.fileset(dir: ".", includes: "*.xml", excludes: excludeString)
      
      if (project.sourceSets.hasProperty('main') && project.sourceSets.main.hasProperty('java')) {
        project.sourceSets.main.java.srcDirs.each { dir ->        
          ant.fileset(dir: dir, excludes: excludeString, erroronmissingdir: "false")
        }
      }
      
      if (project.sourceSets.hasProperty('test') && project.sourceSets.test.hasProperty('java')) {
        project.sourceSets.test.java.srcDirs.each { dir ->
          ant.fileset(dir: dir, excludes: excludeString, erroronmissingdir: "false")
        }
      }
      
      // BSD-like stuff
      ant.substringMatcher(licenseFamilyCategory: "BSD  ", licenseFamilyName: "Modified BSD License") {
        //  brics automaton
        ant.pattern(substring: "Copyright (c) 2001-2009 Anders Moeller")
        // snowball
        ant.pattern(substring: "Copyright (c) 2001, Dr Martin Porter")
        // UMASS kstem
        ant.pattern(substring: "THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS")
        // Egothor
        ant.pattern(substring: "Egothor Software License version 1.00")
        // JaSpell
        ant.pattern(substring: "Copyright (c) 2005 Bruno Martins")
        //  d3.js
        ant.pattern(substring: "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS")
        // highlight.js
        ant.pattern(substring: "THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS")
      }
      
      // MIT-like
      ant.substringMatcher(licenseFamilyCategory: "MIT  ", licenseFamilyName: "The MIT License") {
        // ICU license
        ant.pattern(substring: "Permission is hereby granted, free of charge, to any person obtaining a copy")
      }
      
      // Generated
      ant.substringMatcher(licenseFamilyCategory: "GEN  ", licenseFamilyName: "Generated") {
        // svg files generated by gnuplot
        ant.pattern(substring: "Produced by GNUPLOT")
        // snowball stemmers generated by snowball compiler
        ant.pattern(substring: "This file was generated automatically by the Snowball to Java compiler")
        // parsers generated by antlr
        ant.pattern(substring: "ANTLR GENERATED CODE")
      }
      
      // Apache
      ant.substringMatcher(licenseFamilyCategory: "AL   ", licenseFamilyName: "Apache") {
        ant.pattern(substring: "Licensed to the Apache Software Foundation (ASF) under")
        ant.pattern(substring: "Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)")
        
        // a handful of Solr files came in with this a MITRE Corporation copyright, with ASF 2 license
        ant.pattern(substring: "This software was produced for the U. S. Government")
      }
      
      // * Licensed under the Apache License, Version 2.0 (the "License");
      
      // built in approved licenses
      ant.approvedLicense(familyName: "Apache")
      ant.approvedLicense(familyName: "The MIT License")
      ant.approvedLicense(familyName: "Modified BSD License")
      ant.approvedLicense(familyName: "Generated")
    }
    
    ant.delete() {
      ant.fileset(file: logFile.getAbsolutePath()) {
        ant.and() {
          ant.containsregexp(expression: "^0 Unknown Licenses")
          ant.not() {
            ant.containsregexp(expression: "^\\s+!")
          }
        }
      }
    }
    
    if (logFile.exists()) {
      println logFile.getText("UTF-8")
      throw new GradleException("Rat problems were found!")
    }
    
  }
}


