/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.LicenseCheckTask

subprojects {
  group = 'org.apache.lucene'
}

def distDir = "dist"

tasks.create("checkLicenses", LicenseCheckTask, new File(projectDir.getAbsolutePath()
    + System.properties['file.separator'] + "licenses"))


task jarChecksum(type: org.apache.lucene.gradle.JarChecksum) {
  group = 'Build'
  description = "Generates checksums for Lucene dependency jars."
  inputDir = new File(project.rootProject.projectDir, "/lucene")
  target = new File(project.rootProject.projectDir, "/lucene/licenses")
}

task packageZip(type: Zip ) {
  archiveName = "lucene-${project.version}.zip"
  into ('/')
  from (projectDir) {
    include "LICENSE.txt"
    include "NOTICE.txt"
    include "README.txt"
    include "MIGRATE.txt"
    include "JRE_VERSION_MIGRATION.txt"
    include "SYSTEM_REQUIREMENTS.txt"
    include "CHANGES.txt"
    include "licenses/**"
    include "*/docs/"
    include "**/README*"
    exclude "**/site/**"
    exclude "**/tools/**"
    exclude "**/dist/**"
    exclude "**/build/**"
    into('/')
  }
  
  subprojects.each {subproject ->
    evaluationDependsOn(subproject.path)
    if (subproject.tasks.findByName('jar')) {
      println 'sub path:' + subproject.path
      subproject.jar.outputs.files.each {println it.name}
      from(subproject.jar.outputs.files) {
        println 'path ' + project.relativePath(subproject.projectDir) 
        into (project.relativePath(subproject.projectDir))
      }
    }
  }
  
  includeEmptyDirs = false
  destinationDir = new File(projectDir, distDir)
  extension = 'zip'
}

task packageTar(type: Tar ) {
  archiveName = "lucene-${project.version}.tgz"
  into ('/')
  from (projectDir) {
    include "LICENSE.txt"
    include "NOTICE.txt"
    include "README.txt"
    include "MIGRATE.txt"
    include "JRE_VERSION_MIGRATION.txt"
    include "SYSTEM_REQUIREMENTS.txt"
    include "CHANGES.txt"
    include "licenses/**"
    include "*/docs/"
    include "**/README*"
    exclude "**/site/**"
    exclude "**/tools/**"
    exclude "**/dist/**"
    exclude "**/build/**"
    into('/')
  }
  
  subprojects.each {subproject ->
    evaluationDependsOn(subproject.path)
    if (subproject.tasks.findByName('jar')) {
      println 'sub path:' + subproject.path
      subproject.jar.outputs.files.each {println it.name}
      from(subproject.jar.outputs.files) {
        println 'path ' + project.relativePath(subproject.projectDir) 
        into (project.relativePath(subproject.projectDir))
      }
    }
  }
  
  includeEmptyDirs = false
  destinationDir = new File(projectDir, distDir)
  extension = 'tar'
  compression = Compression.GZIP
}
