apply plugin: 'java-library'

archivesBaseName = 'lucene-core'

def momanCommitHash="5c5c2a1e4dea"
def momanUrl = "https://bitbucket.org/jpbarrette/moman/get/${momanCommitHash}.zip"

dependencies {
  testImplementationTran project(':lucene:codecs')
  testImplementationTran project(':lucene:lucene-test-framework')
}

task createLevAutomaton {
  
  doLast {
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '1', 'True']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '1', 'False']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '2', 'True']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '2', 'False']
    }
  }
}

task fixCRLFAutomaton(type: org.apache.lucene.gradle.FixCRLF) {
  sourceDir = "src/java/org/apache/lucene/util/automaton"
  includes="*ParametricDescription.java"
  encoding="UTF-8"
}

fixCRLFAutomaton.dependsOn createLevAutomaton

task createPackedIntSources {
  
  doLast {
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_BulkOperation.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_Direct.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_Packed64SingleBlock.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_PackedThreeBlocks.py']
    }
  }
}

task fixCRLFPacked(type: org.apache.lucene.gradle.FixCRLF) {
  sourceDir = "src/java/org/apache/lucene/util/packed"
  includes = "BulkOperation*.java,Direct*.java,Packed64SingleBlock.java,Packed*ThreeBlocks.py"
  encoding = "UTF-8"
}

fixCRLFPacked.dependsOn createPackedIntSources

task unzipMoman(){
  doLast {
    ant.unzip(src: "${buildDir}/moman.zip", dest:"${buildDir}/moman", overwrite:"true") {
      ant.cutdirsmapper(dirs: "1")
    }
  }
}

task downloadMoman(type: org.apache.lucene.gradle.Get) {
  sourceUrl = "${momanUrl}"
  target = new File("${buildDir}", 'moman.zip')
}

task runjflex(type: org.apache.lucene.gradle.JFlex) {
  source = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex")
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
}

task regenerate {
  doFirst {
    println "regenerate core"
  }
}

regenerate.dependsOn fixCRLFAutomaton
regenerate.dependsOn fixCRLFPacked

fixCRLFAutomaton.dependsOn unzipMoman
unzipMoman.dependsOn downloadMoman

createLevAutomaton.mustRunAfter unzipMoman

regenerate.dependsOn runjflex


