/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

archivesBaseName = 'lucene-core'

def momanCommitHash="5c5c2a1e4dea"
def momanUrl = "https://bitbucket.org/jpbarrette/moman/get/${momanCommitHash}.zip"

dependencies {
  testImplementation project(':lucene:codecs')
  testImplementation project(':lucene:lucene-test-framework')
}

task createLevAutomaton {
  group = 'Build Regenerate'
  description = "Regenerates LevAutomaton src files."
  
  doFirst {
    println "--> Creating LevAutomaton ..."
  }
  
  doLast {
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '1', 'True']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '1', 'False']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '2', 'True']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/automaton'
      executable "${python_exe}"
      args = ['-B', 'createLevAutomata.py', '2', 'False']
    }
  }
}

task fixCRLFAutomaton(type: org.apache.lucene.gradle.FixCRLF) {
  sourceDir = "src/java/org/apache/lucene/util/automaton"
  includes="*ParametricDescription.java"
  encoding="UTF-8"
}

createLevAutomaton.finalizedBy fixCRLFAutomaton

task createPackedIntSources {
  group = 'Build Regenerate'
  description = "Regenerates PackedInt src files."
  
  doFirst {
    println "--> Creating packed int sources ..."
  }
  
  doLast {
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_BulkOperation.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_Direct.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_Packed64SingleBlock.py']
    }
    exec {
      workingDir 'src/java/org/apache/lucene/util/packed'
      executable "${python_exe}"
      args = ['-B', 'gen_PackedThreeBlocks.py']
    }
  }
}

task fixCRLFPacked(type: org.apache.lucene.gradle.FixCRLF) {
  sourceDir = "src/java/org/apache/lucene/util/packed"
  includes = "BulkOperation*.java,Direct*.java,Packed64SingleBlock.java,Packed*ThreeBlocks.py"
  encoding = "UTF-8"
}

createPackedIntSources.finalizedBy fixCRLFPacked

task installMoman(){
  doLast {
    ant.unzip(src: "${buildDir}/moman.zip", dest:"${buildDir}/moman", overwrite:"true") {
      ant.cutdirsmapper(dirs: "1")
    }
  }
}

task downloadMoman(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "${momanUrl}"
  target = new File("${buildDir}", 'moman.zip')
}

installMoman.dependsOn downloadMoman

task runjflex(type: org.apache.lucene.gradle.JFlex) {
  group = 'Build Regenerate'
  description = "Runs jflex for StandardTokenizerImpl."
  
  inputDir = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
  fileName = "StandardTokenizerImpl"
  disableBufferExpansion = true
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
  
  doFirst {
    println "--> Running jflex ..."
  }
}

task cleanjflex() {
  group = 'Build Regenerate'
  description = "Removed jflex generated artifacts."
  
  doLast {
    ant.delete() {
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/standard", includes: "**/*.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
  }
}

task regenerate {
  group = 'Build Regenerate'
  description = "Regenerates various generated src files, automoton, packedints, jflex, etc"
}

createLevAutomaton.dependsOn installMoman

regenerate.dependsOn createLevAutomaton
regenerate.dependsOn createPackedIntSources
regenerate.dependsOn runjflex


