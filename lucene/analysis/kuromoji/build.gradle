/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: org.apache.lucene.gradle.PartOfDist

archivesBaseName = 'lucene-analyzers-kuromoji'

configurations {
  tools
}

dependencies {
  
  implementation project(':lucene:lucene-core')
  implementation project(':lucene:analysis:lucene-analyzers-common')
  
  tools ('com.ibm.icu:icu4j') { transitive = false }
  
  testImplementation project(':lucene:lucene-test-framework')
}

sourceSets {
  tools {
    compileClasspath += sourceSets.main.runtimeClasspath += configurations.tools
    runtimeClasspath += sourceSets.main.runtimeClasspath
  }
  toolsTest {
    compileClasspath += sourceSets.test.runtimeClasspath += sourceSets.tools.runtimeClasspath += configurations.tools
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }

  tools.java.srcDirs = ['src/tools/java']
  toolsTest.java.srcDirs = ['src/tools/test']
}

compileToolsJava.options.encoding = "UTF-8"
compileToolsTestJava.options.encoding = "UTF-8"



def ipadicVersion = "2.7.0-20070801"
def ipadicFilename = "mecab-ipadic-${ipadicVersion}"

task downloadDict(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "https://jaist.dl.sourceforge.net/project/mecab/mecab-ipadic/${ipadicVersion}/${ipadicFilename}.tar.gz"
  target = mfile("${buildDir}", "${ipadicFilename}.tar.gz")
  
  doLast {
    ant.gunzip(src: filePath("${buildDir}/${ipadicFilename}.tar.gz"))
    ant.untar(src: filePath("${buildDir}/${ipadicFilename}.tar"), dest: "${buildDir}")
  }
}

task patchDict {
  doLast {
    ant.patch(patchfile: "${projectDir}/src/tools/patches/Noun.proper.csv.patch", originalfile: "${buildDir}/${ipadicFilename}/Noun.proper.csv")
  }
  dependsOn downloadDict
}

task buildKuromojiDict(type: JavaExec) {
  group = 'Build Regenerate'
  description = "Downloads, patches, and builds dict for kuromoji."
  
  doFirst {
    def tree = fileTree("${projectDir}/src/resources/org/apache/lucene/analysis/ja/dict")
    tree.include '**/*'
    tree.each { it.delete() }
  }
  
  classpath = sourceSets.tools.runtimeClasspath
  main = 'org.apache.lucene.analysis.ja.util.DictionaryBuilder'
  
  enableAssertions = false // TODO: an assertion fails if set to true!
 
  jvmArgs '-Xmx1G'
  
  args 'ipadic'
  args filePath("${buildDir}/${ipadicFilename}")
  args filePath('src/resources')
  args 'euc-jp'
  args 'false'
  
  dependsOn patchDict
}

task regenerate {
  dependsOn buildKuromojiDict
}

forbiddenApisTools {
  bundledSignatures -= 'jdk-system-out'
  exclude 'org/apache/lucene/**' // exclude until converted to NIO2
}
