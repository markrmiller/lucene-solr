/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: org.apache.lucene.gradle.dist.PartOfDist

archivesBaseName = 'lucene-analyzers-nori'

configurations {
  tools
}

dependencies {
  implementation project(':lucene:lucene-core')
  implementation project(':lucene:analysis:lucene-analyzers-common')
  
  tools ('com.ibm.icu:icu4j')
  
  testImplementation project(':lucene:lucene-test-framework')
}

def mecabVersion = "2.0.3-20170922"
def mecabFilename = "mecab-ko-dic-${mecabVersion}"

task downloadDict(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/${mecabFilename}.tar.gz"
  target = mfile(buildDir, "${mecabFilename}.tar.gz")
  
  doLast {
    ant.gunzip(src: filePath("${buildDir}/${mecabFilename}.tar.gz"))
    ant.untar(src: filePath("${buildDir}/${mecabFilename}.tar"), dest: "${buildDir}")
  }
}

task buildNoriDict(type: JavaExec) {
  group = 'Build Regenerate'
  description = 'Downloads, patches, and builds dict for nori.'
  
  doFirst {
    def tree = fileTree("${projectDir}/org/apache/lucene/analysis/ko/dict")
    tree.include '**/*'
    tree.each { it.delete() }
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.apache.lucene.analysis.ko.util.DictionaryBuilder'
  
  enableAssertions = false // TODO: an assertion fails if set to true!
 
  jvmArgs '-Xmx1G'

  args filePath("${buildDir}/${mecabFilename}")
  args filePath("src/resources")
  args 'utf-8'
  args 'false'
  
  dependsOn downloadDict
}

task regenerate {
  dependsOn buildNoriDict
}

