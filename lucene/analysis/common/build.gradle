/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: org.apache.lucene.gradle.PartOfDist

archivesBaseName = 'lucene-analyzers-common'

def unicodePropsJavaFile = "/src/java/org/apache/lucene/analysis/util/UnicodeProps.java"

def snowballProgramsDir = "${projectDir}/src/java/org/tartarus/snowball/ext"

task jarTest (type: Jar) {
  from sourceSets.test.output
  classifier = 'test'
}

configurations {
  testOutput
}

artifacts {
  testOutput jarTest
}

dependencies {
  
  api project(':lucene:lucene-core')
  
  testImplementation project(':lucene:lucene-test-framework')
}

ratSources {
  excludes = ['**/*.aff', '**/*.dic', '**/*.txt', '**/charfilter/*.htm*', '**/*LuceneResourcesWikiPage.html']
}

task fixCRLFUnicodeData(type: org.apache.lucene.gradle.FixCRLF) {
  file = new File("${projectDir}" + unicodePropsJavaFile)
  encoding = "UTF-8"
}

task unicodeData(type: org.apache.lucene.gradle.GenerateUnicodeData) {
  group = 'Build Regenerate'
  description = "Regenerates Unicode data src files."
  
  unicodePropsFile = new File("${projectDir}" + unicodePropsJavaFile)
  
  finalizedBy fixCRLFUnicodeData
}

task generateJflexHtmlCharEntities() {
  doLast {
    ant.exec(dir: "src/java/org/apache/lucene/analysis/charfilter",
             output: "src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex",
             executable: "${python_exe}", failonerror:"true", logerror:"true") {
             ant.arg(value: "-B")
             ant.arg(value: "htmlentity.py")
    }
    ant.fixcrlf(file: "src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex", encoding: "UTF-8")
  }
}

task jflexHTMLStripCharFilter(type: org.apache.lucene.gradle.JFlex) {
  inputDir = new File("${projectDir}/src/java/org/apache/lucene/analysis/charfilter")
  fileName = "HTMLStripCharFilter"
  disableBufferExpansion = false
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/charfilter")
  dependsOn generateJflexHtmlCharEntities
}

task jflexWikiTokenizer(type: org.apache.lucene.gradle.JFlex) {
  inputDir = new File("${projectDir}/src/java/org/apache/lucene/analysis/wikipedia")
  fileName = "WikipediaTokenizerImpl"
  disableBufferExpansion = false
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/wikipedia")
  
  mustRunAfter project.rootProject.project(":lucene:lucene-core").runJflex
}

task jflexClassicAnalyzer(type: org.apache.lucene.gradle.JFlex) {
  inputDir = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
  fileName = "ClassicTokenizerImpl"
  disableBufferExpansion = false
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")

  mustRunAfter project.rootProject.project(":lucene:lucene-core").runJflex
}

task jflexUAX29URLEmailTokenizer(type: org.apache.lucene.gradle.JFlex) {
  group = 'Build Regenerate'
  description = "Generates UAX29URLEmailTokenizer using jflex."
  
  inputDir = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
  fileName = "UAX29URLEmailTokenizerImpl"
  disableBufferExpansion = true
  target = new File("${projectDir}/src/java/org/apache/lucene/analysis/standard")
}

task runJflex {
  dependsOn jflexWikiTokenizer, jflexClassicAnalyzer // jflexUAX29URLEmailTokenizer is excluded for now because it takes a long time and requires a lot of heap
  finalizedBy jflexHTMLStripCharFilter // Because of a bug in JFlex's ant task (may or may not apply to ant in gradle), HTMLStripCharFilter has to be generated last.
}

task cleanJflex() {
  group = 'Build Regenerate'
  description = "Removes jflex generated artifacts."
  
  doLast {
    ant.delete(failonerror: 'false') {
      // we exclude UAX29URLEmailTokenizerImpl until/unless it is added back to regenerate
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/standard", includes: "**/*.java", excludes: "**/UAX29URLEmailTokenizerImpl.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/wikipedia", includes: "**/*.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
    ant.delete(failonerror: 'false') {
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/charfilter", includes: "**/*.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
  }
}

task cleanJflexUAX29URLEmailTokenizer() {
  group = 'Build Regenerate'
  description = "Removes jflex generated artifacts."
  
  doLast {
    ant.delete(failonerror: 'false') {
      // we exclude UAX29URLEmailTokenizerImpl until it is added back to regenerate
      ant.fileset(dir: "src/java/org/apache/lucene/analysis/standard", includes: "**/UAX29URLEmailTokenizerImpl.java") {
        ant.containsregexp(expression: "generated.*by.*JFlex")
      }
    }
  }
}

task regenerate {
  dependsOn runJflex, unicodeData
}

task patchSnowball {
  group = 'Build Regenerate'
  description = "Patches all snowball programs in '${snowballProgramsDir}' to make them work with MethodHandles"
  
  doLast {
    ant.fileset(id:"snowball.programs", dir:"${snowballProgramsDir}", includes:"*Stemmer.java")
    
    ant.replaceregexp(match: "^public class \\w+Stemmer\b", replace: "@SuppressWarnings(&quot;unused&quot;) \\0", flags: "m", encoding: "UTF-8") {
      ant.fileset(refid:"snowball.programs")
    }

    ant.replaceregexp(match: "private final static \\w+Stemmer methodObject\\b.*\$", replace: "/* patched */ private static final java.lang.invoke.MethodHandles.Lookup methodObject = java.lang.invoke.MethodHandles.lookup();", flags: "m", encoding: "UTF-8") {
      ant.fileset(refid:"snowball.programs")
    }
    ant.fixcrlf(srcdir:"${snowballProgramsDir}", includes:"*Stemmer.java", tab:"remove", tablength:"2", encoding: "UTF-8", javafiles: "yes", fixlast: "yes")
  }
}


