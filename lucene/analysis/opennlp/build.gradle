/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: org.apache.lucene.gradle.dist.PartOfDist

archivesBaseName = 'lucene-analyzers-opennlp'

dependencies {
  implementation project(':lucene:lucene-core')
  implementation project(':lucene:analysis:lucene-analyzers-common')
  
  api ('org.apache.opennlp:opennlp-tools')
  
  testImplementation project(':lucene:lucene-test-framework')
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.sentdetect.training
task trainSentenceDetector(type: JavaExec) {
  
  doFirst {
    mkdir("src/tools/test-model-data")
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'SentenceDetectorTrainer'
  args '-lang' 
  args 'en'
  args '-data' 
  args filePath('src/tools/test-model-data/sentences.txt')
  args '-model'
  args filePath('src/tools/test-model-data/en-test-sent.bin')
  
  doLast {
    ant.copy(file: "${projectDir}/src/tools/test-model-data/en-test-sent.bin", todir: "${project.rootProject.projectDir}/solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/collection1/conf")
  }
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.tokenizer.training
task trainTokenizerTrainer(type: JavaExec) {
  
  doFirst {
    mkdir("src/tools/test-model-data")
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'TokenizerTrainer'
  args '-lang'
  args 'en'
  args '-data'
  args filePath("src/tools/test-model-data/tokenizer.txt")
  args '-model'
  args filePath("src/tools/test-model-data/en-test-tokenizer.bin")
  
  doLast {
    ant.copy(file: filePath("src/tools/test-model-data/en-test-tokenizer.bin"), todir: filePath("${project.rootProject.projectDir}/solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/collection1/conf"))
  }
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.postagger.training
task trainPOSTaggerTrainer(type: JavaExec) {
  
  doFirst {
    mkdir("src/tools/test-model-data")
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'POSTaggerTrainer'
  args '-lang'
  args 'en'
  args '-data'
  args filePath("src/tools/test-model-data/pos.txt")
  args '-model'
  args filePath("src/tools/test-model-data/en-test-pos-maxent.bin")
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.chunker.training
task trainChunkerTrainerME(type: JavaExec) {
  
  doFirst {
    mkdir('src/tools/test-model-data')
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'ChunkerTrainerME'
  args '-lang'
  args 'en'
  args '-data'
  args filePath('src/tools/test-model-data/chunks.txt')
  args '-model'
  args filePath('src/tools/test-model-data/en-test-chunker.bin')
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.namefind.training
task trainTokenNameFinderTrainer(type: JavaExec) {
  
  doFirst {
    mkdir('src/tools/test-model-data')
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'TokenNameFinderTrainer'
  args '-lang'
  args 'en'
  args '-data'
  args filePath('src/tools/test-model-data/ner.txt')
  args '-model'
  args filePath('src/tools/test-model-data/en-test-ner.bin')
  args '-params'
  args filePath('src/tools/test-model-data/ner_TrainerParams.txt')
  
  doLast {
    ant.copy(file: "${projectDir}/src/tools/test-model-data/en-test-ner.bin", todir: "${project.rootProject.projectDir}/solr/contrib/analysis-extras/src/test-files/analysis-extras/solr/collection1/conf")
  }
}

// https://opennlp.apache.org/docs/1.9.0/manual/opennlp.html#tools.lemmatizer.training
task trainLemmatizerTrainerME(type: JavaExec) {
  
  doFirst {
    mkdir('src/tools/test-model-data')
  }
  
  classpath = sourceSets.main.runtimeClasspath
  main = 'opennlp.tools.cmdline.CLI'
  
  args 'LemmatizerTrainerME'
  args '-lang'
  args 'en'
  args '-data'
  args filePath('src/tools/test-model-data/lemmas.txt')
  args '-model'
  args filePath('src/tools/test-model-data/en-test-lemmatizer.bin')
}

task trainTestModels {
  group = 'Build'
  description = "Trains all small test models for unit tests."

  dependsOn trainSentenceDetector, trainTokenizerTrainer, trainPOSTaggerTrainer, trainChunkerTrainerME, trainTokenNameFinderTrainer, trainLemmatizerTrainerME
}

task regenerate {
  dependsOn trainTestModels
}

missingDeps {
  classExclude 'org\\.osgi\\..*' // osgi stuff not on classpath
}

