/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

def workingDir = "${projectDir}/work"

dependencies {
  
  implementationTran project(':lucene:lucene-core')
  implementationTran project(':lucene:analysis:analyzers-common')
  implementationTran project(':lucene:facet')
  implementationTran project(':lucene:highlighter')
  implementationTran project(':lucene:queries')
  implementationTran project(':lucene:spatial-extras')
  implementationTran project(':lucene:queryparser')
  
  implementation "org.apache.commons:commons-compress"
  implementation "xerces:xercesImpl"
  implementation "net.sourceforge.nekohtml:nekohtml"
  implementation "com.ibm.icu:icu4j"
  implementation "org.locationtech.spatial4j:spatial4j"
  
  testImplementationTran project(':lucene:lucene-test-framework')
}

// copy .alg files as resources for testing
task copyConfResources(type: Copy) {
  from('conf')
  into new File(sourceSets.test.java.outputDir, "conf")
}
processTestResources.dependsOn copyConfResources

// Enwiki

task downloadEnwiki(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "http://home.apache.org/~dsmiley/data/enwiki-20070527-pages-articles.xml.bz2"
  target = new File("${projectDir}/temp/enwiki-20070527-pages-articles.xml.bz2")
}

task installEnwiki(){
  group = 'Benchmark Data'
  description = "Install Enwiki data files."
  doLast {
    ant.bunzip2(src: "${projectDir}/temp/enwiki-20070527-pages-articles.xml.bz2", dest:"${projectDir}/temp/")
  }
}

installEnwiki.dependsOn downloadEnwiki

// GeoNames

task downloadGeoNames(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "http://home.apache.org/~dsmiley/data/geonames_20130921_randomOrder_allCountries.txt.bz2"
  target = new File("${projectDir}/temp/allCountries.txt.bz2")
}

task installGeoNames(){
  group = 'Benchmark Data'
  description = "Install GeoNames data files."
  doLast {
    new File("${workingDir}/geonames").mkdirs()
    ant.bunzip2(src: "${projectDir}/temp/allCountries.txt.bz2", dest:"${workingDir}/geonames")
  }
}

installGeoNames.dependsOn downloadGeoNames

// Reuters

task downloadReuters(type: org.apache.lucene.gradle.Download) {
  sourceUrl = "http://www.daviddlewis.com/resources/testcollections/reuters21578/reuters21578.tar.gz"
  target = new File("${projectDir}/temp/reuters21578.tar.gz")
}

task extractReuters(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.apache.lucene.benchmark.utils.ExtractReuters'
  args "${workingDir}/reuters"
  args "${workingDir}/reuters-out"
}

task installReuters(){
  group = 'Benchmark Data'
  description = "Installs Reuters data files."
  doLast {
    new File("${workingDir}/reuters").mkdirs()
    ant.gunzip(src: "${projectDir}/temp/reuters21578.tar.gz", dest:"${projectDir}/temp/")
    ant.untar(src: "${projectDir}/temp/reuters21578.tar", dest: "${workingDir}/reuters")
    def tree = fileTree("${workingDir}/reuters")
    tree.include '**/*.txt'
    tree.each { it.delete() }
  }
}

installReuters.dependsOn extractReuters
extractReuters.dependsOn downloadReuters


forbiddenApisMain {
  bundledSignatures -= 'jdk-system-out'
}

