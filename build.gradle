import org.apache.lucene.gradle.CheckWorkingCopy
import org.apache.lucene.gradle.BuildPlugin

// TODO: look into circuler dependency issues - for IDE's we turn off protection,
// but I've seen it creep up with gw clean build on solr/core recently

plugins {
  id "com.palantir.consistent-versions" version "1.4.0"
  id 'eclipse'
}

def buildSrcDir = project.rootProject.projectDir;

allprojects {
  
  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/releases"
    }
    maven {
      url "http://maven.restlet.org"
    }
    maven {
      url "http://repository.cloudera.com/content/repositories/releases"
    }
    // chinese mirror
    maven {
      url "http://uk.maven.org/maven2"
    }
    jcenter()
  }
  
  buildDir = new File("build")
  
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
}

configure(subprojects) {  pj ->
  
  plugins.withType(JavaPlugin) {
    
    // FORBIDDEN APIS ...need to exclude hadoop etc and enable ...
    // pj.plugins.apply(BuildPlugin)
    
    sourceCompatibility = "11"
    targetCompatibility = "11"
    
    // Use UTF-8, don't rely on local platform encoding.
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    
    sourceSets {
      main.java.srcDirs = ['src/java']
      main.resources.srcDirs = ['src/resources']
      test.java.srcDirs = ['src/test']
      test.resources.srcDirs = ['src/test-files']
    }
    
    // configure tests
    project.apply from: new File(buildSrcDir, "buildSrc/common/configure-test.gradle")
     
    // we create new implementationTran and testImplementationTran configurations that are
    // transitive and can be used between modules
    project.apply from: new File(buildSrcDir, "buildSrc/common/configure-impltran.gradle")
    
    // Custom javac options
    tasks.withType(JavaCompile) {
      // Don't output ALL errors in a file, stop after a few
      options.compilerArgs << "-Xmaxerrs" << "5"
    }
    
    // Some test resources and files are stored along the test sources
    // and are expected to exist next to classes during tests
    task copyTestResources(type: Copy) {
      from('src/test') {
        exclude '**/*.java'
      }
      into sourceSets.test.java.outputDir
    }
    processTestResources.dependsOn copyTestResources

    task sourceJar(type: Jar) {
      classifier 'sources'
      from sourceSets.main.allJava
    }
    
    // configure maven
    publishing {
      publications {
        mavenJava(MavenPublication) {
          from components.java
          artifact tasks.sourceJar
        }
      }
    }
  }
}

// root project config

configurations {
  jflex
}

dependencies {
  jflex "de.jflex:jflex:1.7.0"
}

tasks.create('checkWorkingCopy', CheckWorkingCopy, true)

task checkSourcePatterns(type: org.apache.lucene.gradle.CheckSourcePatterns) {
  baseDir = rootProject.projectDir
}

task('regenerate') {
  doFirst {
    println "--> regenerate"
  }
}

// setup eclipse and idea
allprojects {
  plugins.withType(JavaPlugin) {
    project.apply from: new File(buildSrcDir, "buildSrc/ide/eclipse.gradle")
    project.apply from: new File(buildSrcDir, "buildSrc/ide/idea.gradle")
  }
}



