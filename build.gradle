/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.CheckWorkingCopy
import org.apache.lucene.gradle.LuceneSolrForbiddenApisPlugin

plugins {
  id "com.palantir.consistent-versions" version "1.4.0"
  id 'eclipse'
}

// define lucene-solr project lists that exclude buildSrc
def luceneSolrProjects = allprojects.findAll { project -> project.name != 'buildSrc'};
def luceneSolrSubProjects = subprojects.findAll { project -> project.name != 'buildSrc'}

def buildSrcDir = project.rootProject.projectDir;

// TOC
// -> lucene-solr all project config
// -> lucene-solr sub module config
// -> lucene-solr root project config
// -> lucene-solr IDE config


// -> lucene-solr all module config - configure all lucene-solr projects, including root project
configure(luceneSolrProjects) {

  // setup repositories
  project.apply from: new File(buildSrcDir, "buildSrc/common/configure-repositories.gradle")
  
  buildDir = new File("build")
  
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
}

// -> lucene-solr sub module config - configure all lucene-solr modules (excludes the root project)
configure(luceneSolrSubProjects) {  pj ->
  
  plugins.withType(JavaPlugin) {

    pj.plugins.apply(LuceneSolrForbiddenApisPlugin)
    
    sourceCompatibility = "11"
    targetCompatibility = "11"
    
    // Use UTF-8, don't rely on local platform encoding.
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    
    sourceSets {
      main.java.srcDirs = ['src/java']
      main.resources.srcDirs = ['src/resources']
      test.java.srcDirs = ['src/test']
      test.resources.srcDirs = ['src/test-files']
    }
    
    // configure tests
    project.apply from: new File(buildSrcDir, "buildSrc/common/configure-test.gradle")
     
    // we create new implementationTran and testImplementationTran configurations that are
    // transitive and can be used between modules
    project.apply from: new File(buildSrcDir, "buildSrc/common/configure-impltran.gradle")
    
    // Custom javac options
    tasks.withType(JavaCompile) {
      // Don't output ALL errors in a file, stop after a few
      options.compilerArgs << "-Xmaxerrs" << "5"
    }

    task sourceJar(type: Jar) {
      classifier 'sources'
      from sourceSets.main.allJava
    }
    
    // configure maven
    publishing {
      publications {
        mavenJava(MavenPublication) {
          from components.java
          artifact tasks.sourceJar
        }
      }
    }
    
    // TODO: figure out how to have this in buildSrc
    configurations {
      jflex
    }
    
    dependencies {
      jflex "de.jflex:jflex:1.7.0"
    }
  }
}

// -> lucene-solr root project config - configure the root project
configure(rootProject) {
  
  // root project config
  
  // TODO: enable the modified files checking only for jenkins runs! sysprop?
  tasks.create('checkWorkingCopy', CheckWorkingCopy, false)
  
  task checkSourcePatterns(type: org.apache.lucene.gradle.CheckSourcePatterns) {
    group = 'Build'
    description = "Checks source files for project violations."
    baseDir = rootProject.projectDir
  }
}

// -> lucene-solr IDE config - setup eclipse and idea
allprojects {
  plugins.withType(JavaPlugin) {
    project.apply from: new File(buildSrcDir, "buildSrc/ide/eclipse.gradle")
    project.apply from: new File(buildSrcDir, "buildSrc/ide/idea.gradle")
  }
}

