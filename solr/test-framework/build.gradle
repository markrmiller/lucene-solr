/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.MissingDeps
 
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: org.apache.lucene.gradle.PartOfDist

archivesBaseName = 'solr-test-framework'

dependencies {
  runtimeOnly "org.slf4j:jcl-over-slf4j"
  
  api project(':lucene:lucene-test-framework')
  api project(':solr:solr-solrj')
  api project(':solr:solr-core')
  api project(':lucene:lucene-core')
  api project(':lucene:lucene-codecs')
  api project(':lucene:lucene-queries')
  api project(':lucene:analysis:lucene-analyzers-common')
  
  api ('junit:junit') { transitive = false }
  api ('io.opentracing:opentracing-mock')
  implementation ('commons-cli:commons-cli')
  implementation ('org.apache.httpcomponents:httpclient') { transitive = false }
  implementation ('org.apache.httpcomponents:httpcore') { transitive = false }
  implementation ('org.apache.httpcomponents:httpmime') { transitive = false }
  implementation ('org.slf4j:slf4j-api') { transitive = false }
  implementation ('org.apache.logging.log4j:log4j-api') { transitive = false }
  implementation ('org.apache.zookeeper:zookeeper') { transitive = false }
  implementation ('org.apache.zookeeper:zookeeper-jute')
  implementation ('commons-io:commons-io') { transitive = false }
  api ('org.eclipse.jetty:jetty-util') { transitive = false }
  implementation ('org.apache.logging.log4j:log4j-core') { transitive = false }
  api ('javax.servlet:javax.servlet-api') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-core') { transitive = false }
  implementation ('org.bitbucket.b_c:jose4j') { transitive = false }
  implementation ('com.google.guava:guava')
  api ('org.eclipse.jetty:jetty-server') { transitive = false }
  api ('org.eclipse.jetty:jetty-servlet') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-jetty9') { transitive = false }
  implementation ('commons-codec:commons-codec') { transitive = false }
  
  testImplementation ('org.eclipse.jetty:jetty-http') { transitive = false }
  testImplementation ('org.eclipse.jetty:jetty-io') { transitive = false }
  testImplementation ('org.eclipse.jetty:jetty-security') { transitive = false }
  testImplementation ('org.eclipse.jetty:jetty-client') { transitive = false }
  testImplementation ('org.eclipse.jetty:jetty-xml') { transitive = false }
  testImplementation ('org.apache.httpcomponents:httpclient') { transitive = false }
  testImplementation ('org.apache.httpcomponents:httpcore') { transitive = false }
  testImplementation ('io.dropwizard.metrics:metrics-core') { transitive = false }
  testImplementation ('io.dropwizard.metrics:metrics-jmx') { transitive = false }
  testImplementation ('org.rrd4j:rrd4j') { transitive = false }
  testImplementation ('io.dropwizard.metrics:metrics-jvm') { transitive = false }
  
  testImplementation ('org.eclipse.jetty.http2:http2-client') { transitive = false }
  testImplementation ('org.eclipse.jetty.http2:http2-http-client-transport') { transitive = false }
  testImplementation ('org.eclipse.jetty.http2:http2-common') { transitive = false }
  testImplementation ('org.eclipse.jetty.http2:http2-hpack') { transitive = false }
  
  testImplementation ('org.apache.hadoop:hadoop-minicluster') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-common') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-common::tests') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-hdfs') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-hdfs::tests') { transitive = false }
  
  testImplementation ('commons-fileupload:commons-fileupload') { transitive = false }
  testImplementation ('org.apache.commons:commons-lang3') { transitive = false }

  runtimeOnly ('org.apache.logging.log4j:log4j-api') { transitive = false }
  runtimeOnly ('org.apache.logging.log4j:log4j-core') { transitive = false }
  runtimeOnly ('org.apache.logging.log4j:log4j-slf4j-impl') { transitive = false }
  runtimeOnly ('com.lmax:disruptor') { transitive = false }
  
}

missingDeps {

  // add solr-core exclusions
  MissingDeps.addExclusionsFrom(project(':solr:solr-core'), project)
}


