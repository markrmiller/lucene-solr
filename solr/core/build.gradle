/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

archivesBaseName = 'solr-core'

dependencies {
  
  implementation project(':solr:solrj')
  
  implementation project(':lucene:lucene-core')
  implementation project(':lucene:codecs')
  implementation project(':lucene:analysis:analyzers-common')
  implementation project(':lucene:analysis:analyzers-phonetic')
  implementation project(':lucene:analysis:analyzers-kuromoji')
  implementation project(':lucene:analysis:analyzers-nori')
  implementation project(':lucene:suggest')
  implementation project(':lucene:queries')
  implementation project(':lucene:highlighter')
  implementation project(':lucene:spatial-extras')
  implementation project(':lucene:grouping')
  implementation project(':lucene:classification')
  implementation project(':lucene:expressions')
  implementation project(':lucene:sandbox')
  implementation project(':lucene:queryparser')
  implementation project(':lucene:misc')
  implementation project(':lucene:join')
  
  compileOnly ('javax.servlet:javax.servlet-api') { transitive = false }
  
  implementation ('org.eclipse.jetty:jetty-servlet') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-server') { transitive = false }
  
  implementation ('org.apache.httpcomponents:httpclient') { transitive = false }
  implementation ('org.apache.httpcomponents:httpmime') { transitive = false }
  implementation ('org.apache.httpcomponents:httpcore') { transitive = false }
  
  // TODO: this is not good
  implementation ('org.apache.logging.log4j:log4j-slf4j-impl') { transitive = false }
  
  implementation ('org.slf4j:slf4j-api') { transitive = false }
  implementation ('org.slf4j:jcl-over-slf4j') { transitive = false }
  implementation ('org.codehaus.woodstox:stax2-api') { transitive = false }
  implementation ('org.codehaus.woodstox:woodstox-core-asl') { transitive = false }
  implementation ('org.apache.zookeeper:zookeeper') { transitive = false }
  implementation ('org.ow2.asm:asm') { transitive = false }
  implementation ('org.ow2.asm:asm-commons') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-core') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-graphite') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-jvm') { transitive = false }
  implementation ('io.dropwizard.metrics:metrics-jmx') { transitive = false }
  implementation ('org.noggit:noggit') { transitive = false }
  implementation ('commons-codec:commons-codec') { transitive = false }
  implementation ('commons-io:commons-io') { transitive = false }
  implementation ('org.apache.commons:commons-exec') { transitive = false }
  implementation ('commons-fileupload:commons-fileupload') { transitive = false }
  implementation ('commons-cli:commons-cli') { transitive = false }
  implementation ('org.apache.commons:commons-text') { transitive = false }
  implementation ('com.google.guava:guava') { transitive = false }
  implementation ('org.locationtech.spatial4j:spatial4j') { transitive = false }
  implementation ('org.apache.commons:commons-math3') { transitive = false }
  implementation ('org.ow2.asm:asm') { transitive = false }
  
  implementation ('org.restlet.jee:org.restlet') { transitive = false }
  implementation ('org.restlet.jee:org.restlet.ext.servlet') { transitive = false }
  implementation ('com.carrotsearch:hppc') { transitive = false }
  
  implementation ('org.apache.logging.log4j:log4j-api') { transitive = false }
  implementation ('org.apache.logging.log4j:log4j-core') { transitive = false }
  implementation ('org.apache.logging.log4j:log4j-1.2-api') { transitive = false }
  implementation ('org.slf4j:jcl-over-slf4j') { transitive = false }
  
  implementation ('com.fasterxml.jackson.core:jackson-core') { transitive = false }
  implementation ('com.fasterxml.jackson.core:jackson-databind') { transitive = false }
  implementation ('com.fasterxml.jackson.core:jackson-annotations') { transitive = false }
  implementation ('com.fasterxml.jackson.dataformat:jackson-dataformat-smile') { transitive = false }
  implementation ('org.apache.hadoop:hadoop-auth') { transitive = false }
  implementation ('org.apache.hadoop:hadoop-common') { transitive = false }
  implementation ('org.apache.hadoop:hadoop-hdfs-client') { transitive = false }
  implementation ('org.apache.hadoop:hadoop-annotations') { transitive = false }
  implementation ('org.apache.commons:commons-configuration2') { transitive = false }
  implementation ('commons-collections:commons-collections') { transitive = false }
  implementation ('commons-beanutils:commons-beanutils') { transitive = false }
  implementation ('com.github.ben-manes.caffeine:caffeine') { transitive = false }
  implementation  ('com.google.re2j:re2j') { transitive = false }
  implementation ('org.apache.commons:commons-lang3') { transitive = false }
  implementation ('org.apache.htrace:htrace-core4') { transitive = false }
  implementation ('org.apache.curator:curator-framework') { transitive = false }
  implementation ('org.apache.curator:curator-client') { transitive = false }
  implementation ('org.apache.curator:curator-recipes') { transitive = false }
  implementation ('org.apache.kerby:kerb-core') { transitive = false }
  implementation ('org.apache.kerby:kerb-util') { transitive = false }
  implementation ('org.apache.kerby:kerby-asn1') { transitive = false }
  implementation ('org.apache.kerby:kerby-pkix') { transitive = false }
  
  implementation ('com.tdunning:t-digest') { transitive = false }
  implementation ('org.apache.calcite:calcite-core') { transitive = false }
  implementation ('org.apache.calcite:calcite-linq4j') { transitive = false }
  implementation ('org.apache.calcite.avatica:avatica-core') { transitive = false }
  implementation ('org.apache.commons:commons-lang3') { transitive = false }
  implementation ('net.hydromatic:eigenbase-properties') { transitive = false }
  implementation ('org.codehaus.janino:janino') { transitive = false }
  implementation ('org.codehaus.janino:commons-compiler') { transitive = false }
  implementation ('com.google.protobuf:protobuf-java') { transitive = false }
  implementation ('com.jayway.jsonpath:json-path') { transitive = false }
  implementation ('org.rrd4j:rrd4j') { transitive = false }
  implementation ('org.bitbucket.b_c:jose4j') { transitive = false }
  
  implementation ('org.eclipse.jetty:jetty-alpn-server') { transitive = false }
  implementation ('org.eclipse.jetty.http2:http2-server') { transitive = false }
  implementation ('org.eclipse.jetty.http2:http2-client') { transitive = false }
  implementation ('org.eclipse.jetty.http2:http2-http-client-transport') { transitive = false }
  implementation ('org.eclipse.jetty.http2:http2-common') { transitive = false }
  implementation ('org.eclipse.jetty.http2:http2-hpack') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-client') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-util') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-http') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-io') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-xml') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-alpn-java-client') { transitive = false }
  implementation ('org.eclipse.jetty:jetty-alpn-client') { transitive = false }
  
  testRuntimeOnly ('com.lmax:disruptor') { transitive = false }
  
  testImplementation ('org.eclipse.jetty:jetty-webapp') { transitive = false }
  testImplementation ('com.sun.jersey:jersey-servlet:1.19.4') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-minicluster') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-common::tests') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-hdfs') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-hdfs::tests') { transitive = false }
  testImplementation ('commons-logging:commons-logging') { transitive = false }
  testImplementation ('io.netty:netty-all') { transitive = false }
  testImplementation ('org.apache.commons:commons-text') { transitive = false }
  testImplementation ('org.apache.hadoop:hadoop-minikdc') { transitive = false }
  testImplementation ('org.apache.kerby:kerby-config') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-client') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-common') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-crypto') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-identity') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-server') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-simplekdc') { transitive = false }
  testImplementation ('org.apache.kerby:kerby-util') { transitive = false }
  testImplementation ('org.apache.kerby:kerb-admin') { transitive = false }
  testImplementation ('org.apache.kerby:kerby-kdc') { transitive = false }
  testImplementation ('org.mockito:mockito-core') { transitive = false }
  testImplementation ('net.bytebuddy:byte-buddy') { transitive = false }
  testImplementation ('org.objenesis:objenesis') { transitive = false }
  
  testImplementation project(path: ':lucene:backward-codecs', configuration: 'testOutput')
  testImplementation project(path: ':lucene:queryparser', configuration: 'testOutput')
  testImplementation project(':lucene:lucene-test-framework')
  testImplementation project(':solr:solr-test-framework')
  testImplementation project(':lucene:analysis:analyzers-icu')
  testImplementation project(':solr:contrib:analysis-extras')
  
}

ratSources {
  excludes = ['**/htmlStripReaderTest.html', '**/*.iml']
}

forbiddenApisTest {
  exclude 'org/apache/solr/internal/**'
  exclude 'org/apache/hadoop/**'
}
